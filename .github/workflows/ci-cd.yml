name: CI/CD Pipeline for Dockerized App

permissions:
  contents: write  # This grants the necessary permission to push changes
  pull-requests: write  # If you're managing pull requests, you need this too

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: biplavm
          password: biplav001

      - name: Build Docker image
        run: |
          docker build -t biplavm/my-next-app:$GITHUB_SHA .

      - name: Push Docker image to Docker Hub
        run: |
          docker push biplavm/my-next-app:$GITHUB_SHA

  test:
    runs-on: ubuntu-latest
    needs: build  # This ensures tests run after the build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Run Tests in Docker Container
        run: |
          docker run -d --name test-container biplavm/my-next-app:$GITHUB_SHA
          docker exec test-container npm run test
          docker stop test-container

  merge:
    runs-on: ubuntu-latest
    needs: test  # This ensures the merge happens only if tests pass

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Fetch latest changes
        run: |
          git fetch origin

      - name: Merge dev into main
        run: |
          git checkout main
          git pull origin main
          git merge origin/devtest --no-ff -m "Auto-merge testdev into main after passing tests"
        continue-on-error: true  # Continue even if merge fails

      - name: Push merge to main
        run: |
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Ensure the push is authenticated
